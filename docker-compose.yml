version: '2.1'
volumes:
  collected_static: {}
services:

  # QED Django front-end
  qed_django:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}  # passing VERSION env var to Dockerfile as ARG, default = latest
    #image: quanted/qed:${VERSION:-latest}  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "8080"
    volumes:
      - collected_static:/src/collected_static
      - .:/src  # map qed/ to container's /src for updating w/out rebuilding images
    environment:
      - REDIS_HOSTNAME=redis
      #these echo in the environmental variable to the running docker container
      #so that is can be picked up by the django settings 
      # - DOCKER_HOSTNAME=${HOSTNAME}
      - DOCKER_HOSTNAME=docker
      #- DOCKER_SECRET_KEY=${SECRET_KEY}
    links:
      - redis
      - cts-tomcat

  # Redis (message broker)
  redis:
    image: redis:latest
    hostname: redis
    expose:
      - "6379"

  # ubertool_cts nodejs submodule
  cts_nodejs:
    build: ./cts_nodejs
    image: cts-nodejs
    expose:
      - "4000"
    environment:
      - NODEJS_HOST=cts_nodejs
      - NODEJS_PORT=4000
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
    links:
      - redis
      # - worker_chemaxon
      # - worker_epi
      # - worker_test
      # - worker_sparc
      # - worker_measured
      # - worker_metabolizer

  # # Celery worker - manager calc
  worker_manager:
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}
    # build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q manager_queue -l info -n manager_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}

  # # Celery worker - ChemAxon calc
  worker_cts:
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}
    # build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q cts_queue -l info -n cts_worker -c 2
    links:
      - redis
      - qed_django
      - cts-tomcat
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - EPI Suite calc
  # worker_epi:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q epi -l info -n epi_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}


  # # # Celery worker - TEST calc
  # worker_test:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q test -l info -n test_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - SPARC calc
  # worker_sparc:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q sparc -l info -n sparc_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - Measured (EPI) calc
  # worker_measured:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q measured -l info -n measured_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - Metabolizer calc
  # worker_metabolizer:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q metabolizer -l info -n metabolizer_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - cheminfo calc
  # worker_cheminfo:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q cheminfo -l info -n cheminfo_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  # # # Celery worker - manager calc
  # worker_manager:
  #   build:
  #     context: ./cts_celery
  #     dockerfile: Dockerfile
  #     args:
  #       version: ${VERSION:-latest}
  #   # build: ./cts_celery
  #   image: cts-celery
  #   command: celery worker -A tasks -Q manager -l info -n manager_worker -c 1
  #   links:
  #     - redis
  #   environment:
  #     - REDIS_HOSTNAME=redis
  #     - DOCKER_HOSTNAME=${HOSTNAME}

  qed_nginx:
    restart: always
    build: ./cts_nginx
    # build: ./qed_nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - qed_django:uwsgi_django  # Nginx.conf can reference "qed_django" service with the hostname 'uwsgi' or 'qed_django'
      - cts_nodejs:cts_nodejs
    volumes:
      - /var/www/nginx/certs:/etc/nginx/qed # this points to the keys directory
    volumes_from:
      - qed_django:ro  # Mount all volumes from "qed_django" to NGINX, so it can access the collected static files


  cts-tomcat:
    build:
      context: ./cts_tomcat
      dockerfile: Dockerfile
    # build: ./cts_tomcat
    image: cts_tomcat:dev
    expose:
      - "8080"
    environment:
      - JAVA_OPTS=-Xmx1g
    volumes:
      - ./cts_tomcat/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml
      - ./cts_tomcat/webapps:/usr/local/tomcat/webapps
      - ./cts_tomcat/chemaxon/licenses:/home/tomcat/.chemaxon/licenses