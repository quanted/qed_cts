version: '2.1'
volumes:
  collected_static: {}
services:

  # QED Django front-end
  qed_django:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}  # passing VERSION env var to Dockerfile as ARG, default = latest
    image: quanted/qed:${VERSION:-latest}  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "8080"
    volumes:
      - collected_static:/src/collected_static
      - .:/src  # map qed/ to container's /src for updating w/out rebuilding images
    environment:
      - REDIS_HOSTNAME=redis
      #these echo in the environmental variable to the running docker container
      #so that is can be picked up by the django settings 
      - DOCKER_HOSTNAME=${HOSTNAME}
      #- DOCKER_SECRET_KEY=${SECRET_KEY}
    links:
      - redis

  # Redis (message broker)
  redis:
    image: redis:latest
    hostname: redis
    expose:
      - "6379"

  # ubertool_cts nodejs submodule
  cts_nodejs:
    build: ./cts_nodejs
    image: cts-nodejs
    expose:
      - "4000"
    environment:
      - NODEJS_HOST=cts_nodejs
      - NODEJS_PORT=4000
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
    links:
      - redis
      - worker_chemaxon
      - worker_epi
      - worker_test
      - worker_sparc
      - worker_measured
      - worker_metabolizer

  # # Celery worker - ChemAxon calc
  worker_chemaxon:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q chemaxon -l info -n chemaxon_worker -c 1
    links:
      - redis
      - qed_django
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}


  # # Celery worker - EPI Suite calc
  worker_epi:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q epi -l info -n epi_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}


  # # Celery worker - TEST calc
  worker_test:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q test -l info -n test_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - SPARC calc
  worker_sparc:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q sparc -l info -n sparc_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - Measured (EPI) calc
  worker_measured:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q measured -l info -n measured_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - Metabolizer calc
  worker_metabolizer:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q metabolizer -l info -n metabolizer_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - cheminfo calc
  worker_cheminfo:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q cheminfo -l info -n cheminfo_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - manager calc
  worker_manager:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q manager -l info -n manager_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - sam_worker
  sam_worker:
    build: ./ubertool_ecorest
    #image: cts-celery:latest
    command: celery worker -A tasks -c 1 -Q sam --loglevel=DEBUG -n sam_worker
    volumes:
      - ./ubertool_ecorest/ubertool/ubertool/sam/bin:/src/ubertool/ubertool/sam/bin
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
#    env_file:
#      - ./${QED_CONFIG}

  # Update for Celery: celery_worker and redis
  # rename to worker_flask
#  celery_worker:
#    build: ./celery_qed
#    image: stack-celery
#    command: celery worker -A tasks -Q testing -l info
#    links:
#      - redis
#      - ecorest
#    environment:
#      - REDIS_HOSTNAME=redis
#      - DOCKER_HOSTNAME=${HOSTNAME}


  qed_nginx:
    restart: always
    # build: ../cts_nginx
    build: ./qed_nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - qed_django:uwsgi_django  # Nginx.conf can reference "qed_django" service with the hostname 'uwsgi' or 'qed_django'
      - cts_nodejs:cts_nodejs
      - ecorest:uwsgi_flask
    #  - hwbi_rest
    volumes:
      - /var/www/nginx/certs:/etc/nginx/qed # this points to the keys directory
    volumes_from:
      - qed_django:ro  # Mount all volumes from "qed_django" to NGINX, so it can access the collected static files


  # ubertool_ecorest Flask back-end
  ecorest:
    build: ./ubertool_ecorest
    expose:
      - "7777"
    links:
      - redis
      - sam_worker
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    volumes:
      - ./ubertool_ecorest/ubertool/ubertool/sam/bin:/src/ubertool/ubertool/sam/bin
    # command: celery worker -A tasks -Q manager -l info -n manager_worker -c 1
    # command: celery worker -A tasks -c 1 -Q sam --loglevel=DEBUG -n sam_worker
    #depends_on:
    #  - "redis"

  #hwbi_rest:
  #  build: ../hwbi_rest/src/hwbi_rest
  #  expose:
  #    - "8888"
